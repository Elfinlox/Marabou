

import MarabouNetworkNNetExtended
from  MarabouNetworkNNet import *

def splitList(list,l):
    return list[:l], list[l:]



# Takes one MarabouNetworkNNEt object and layer l, and returns two MarabouNetworkNNet objects, generated by cutting the original network
# after layer l. Note that the input layer is considered layer 0.

def splitNNet(marabou_nnet: MarabouNetworkNNet, l):
    if (l < 1) or (l > marabou_nnet.numLayers):
        print("nothing to do")
        return(False)
    weights1, weights2 = splitList(marabou_nnet.weights, l)
    biases1, biases2 = splitList(marabou_nnet.biases, l)

    new_input_size = marabou_nnet.layerSizes[l+1]

    mins1 = marabou_nnet.inputMaximums
    maxs1 = marabou_nnet.inputMaximums

    means1 = marabou_nnet.inputMeans
    ranges1 = marabou_nnet.inputRanges

    maxs2 = [0]*new_input_size  # Not sure!
    mins2 = [0]*new_input_size  # Not sure!
    means2 = [0] * (new_input_size+1)  # Not sure!
    ranges2 = [0] * (new_input_size+1)  # Not sure!

    means2[-1] = marabou_nnet.inputMeans[-1]
    ranges2[-1] = marabou_nnet.inputRanges[-1]

    # NOTE that these choices may affect the evaluations! One should be careful with applying normalization.

    nnet1 = NNet(weights1, biases1, mins1, maxs1, means1, ranges1)
    nnet2 = NNet(weights2, biases2, mins2, maxs2, means2, ranges2)

    return nnet1, nnet2




nnet = MarabouNetworkNNet("../resources/nnet/acasxu/ACASXU_experimental_v2a_1_9.nnet")
